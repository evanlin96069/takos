#if !GDT
#define GDT

#include "string.ika"

#include "tss.ika"

packed struct gdt_entry_t {
    limit_low: u16,
    base_low: u16,
    base_middle: u8,
    access: u8,
    granularity: u8,
    base_high: u8,
};

packed struct gdt_ptr_t {
    limit: u16,
    base: u32,
};

enum {
    GDT_NULL,
    GDT_KCODE,
    GDT_KDATA,
    GDT_UCODE,
    GDT_UDATA,
    GDT_TSS,
    GDT_ENTRIES
};

var gdt: [GDT_ENTRIES]gdt_entry_t;
var gdtp: gdt_ptr_t;

fn gdt_set_gate(
    i: u32,
    base: u32,
    limit: u32,
    access: u8,
    flags: u8
) void {
    gdt[i].base_low =  base & 0xFFFF;
    gdt[i].base_middle = (base >> 16) & 0xFF;
    gdt[i].base_high = (base >> 24) & 0xFF;

    gdt[i].limit_low = limit & 0xFFFF;
    gdt[i].granularity = ((limit >> 16) & 0x0F) | (flags & 0xF0);
    gdt[i].access = access;
}

fn gdt_flush(gdt_addr: u32) void {
    asm("movl 8(%ebp), %eax"); // gdt_addr
    asm("lgdt (%eax)");

    asm("movw $0x10, %ax");
    asm("movw %ax, %ds");
    asm("movw %ax, %es");
    asm("movw %ax, %fs");
    asm("movw %ax, %gs");
    asm("movw %ax, %ss");

    asm("ljmp $0x08, $1f");
    asm("1:");
}

fn gdt_init() void {
    gdtp.limit = sizeof([GDT_ENTRIES]gdt_entry_t) - 1;
    gdtp.base  = as(u32, &gdt);

    // 0: Null descriptor
    gdt_set_gate(GDT_NULL, 0, 0, 0, 0);

    // 1: Kernel code — base 0, limit 4 GiB, exec/read, ring 0
    gdt_set_gate(GDT_KCODE, 0, 0xFFFFFFFF, 0x9A, 0xCF);

    // 2: Kernel data — base 0, limit 4 GiB, read/write, ring 0
    gdt_set_gate(GDT_KDATA, 0, 0xFFFFFFFF, 0x92, 0xCF);

    // 3-4: flat user segments (base 0, limit 4 GiB)
    gdt_set_gate(GDT_UCODE, 0, 0xFFFFFFFF, 0xFA, 0xCF);
    gdt_set_gate(GDT_UDATA, 0, 0xFFFFFFFF, 0xF2, 0xCF);

    // 5: 32-bit available TSS descriptor
    var base: u32  = as(u32, &tss);
    var limit: u32 = base + sizeof(tss_entry_t);
    gdt_set_gate(GDT_TSS, base, limit, 0xE9, 0x00);

    gdt_flush(as(u32, &gdtp));
}

#endif
