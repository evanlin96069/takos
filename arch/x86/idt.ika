#if !IDT
#define IDT

struct regs_t {
    gs: u32,
    fs: u32,
    es: u32,
    ds: u32,

    edi: u32,
    esi: u32,
    ebp: u32,
    esp: u32,
    ebx: u32,
    edx: u32,
    ecx: u32,
    eax: u32,

    int_no: u32,
    err_code: u32,

    eip: u32,
    cs: u32,
    eflags: u32,
    useresp: u32,
    ss: u32,
};

packed struct idt_entry_t {
    base_low: u16,
    sel: u16,
    always0: u8,
    flags: u8,
    base_high: u16,
};

packed struct idt_ptr_t {
    limit: u16,
    base: u32,
};

var idt: [256]idt_entry_t;
var idtp: idt_ptr_t;

fn idt_set_gate(
    num: u8,
    base: u32,
    sel: u16,
    flags: u8
) void {
    idt[num].base_low = base & 0xFFFF;
    idt[num].base_high = (base >> 16) & 0xFFFF;

    idt[num].sel = sel;
    idt[num].always0 = 0;
    idt[num].flags = flags;
}

fn idt_flush(idt_addr: u32) void {
    asm("movl 8(%ebp), %eax"); // gdt_addr
    asm("lidt (%eax)");
}

fn idt_init() void {
    idtp.limit = sizeof([256]idt_entry_t) - 1;
    idtp.base = as(u32, &idt);

    var i: u32 = 0;
    while (i < 256) : (i += 1) {
        idt_set_gate(i, 0, 0x08, 0x8E);
    }

    idt_flush(as(u32, &idtp));
}

#endif
