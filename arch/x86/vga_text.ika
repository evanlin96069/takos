#if !VGA_TEXT
#define VGA_TEXT

#include "string.ika"
#include "io.ika"

const VGA_W = 80;
const VGA_H = 25;

enum {
    VGA_COLOR_BLACK = 0,
    VGA_COLOR_BLUE = 1,
    VGA_COLOR_GREEN = 2,
    VGA_COLOR_CYAN = 3,
    VGA_COLOR_RED = 4,
    VGA_COLOR_MAGENTA = 5,
    VGA_COLOR_BROWN = 6,
    VGA_COLOR_LIGHT_GREY = 7,
    VGA_COLOR_DARK_GREY = 8,
    VGA_COLOR_LIGHT_BLUE = 9,
    VGA_COLOR_LIGHT_GREEN = 10,
    VGA_COLOR_LIGHT_CYAN = 11,
    VGA_COLOR_LIGHT_RED = 12,
    VGA_COLOR_LIGHT_MAGENTA = 13,
    VGA_COLOR_LIGHT_BROWN = 14,
    VGA_COLOR_WHITE = 15,
};

const CRTC_ADDR = 0x3D4;
const CRTC_DATA = 0x3D5;
const CURSOR_HIGH = 0xE;
const CURSOR_LOW = 0xF;

var vga_text: []u16;
var vga_attribute: u8 = VGA_COLOR_LIGHT_GREY;
var vga_cursor_x: u8 = 0;
var vga_cursor_y: u8 = 0;

fn _vga_scroll() void {
    var blank: u16 = ' ' | vga_attribute << 8;
    if (vga_cursor_y >= VGA_H) {
        var temp: u16 = vga_cursor_y - VGA_H + 1;
        memcpy(vga_text, vga_text + temp * VGA_W, (VGA_H - temp) * VGA_W * 2);
        wmemset(vga_text + (VGA_H - temp) * VGA_W, blank, VGA_W);
        vga_cursor_y = 25 - 1;
    }
}

fn _vga_move_cursor() void {
    var temp: u16 = vga_cursor_y * VGA_W + vga_cursor_x;
    outb(CRTC_ADDR, CURSOR_HIGH);
    outb(CRTC_DATA, temp >> 8);
    outb(CRTC_ADDR, CURSOR_LOW);
    outb(CRTC_DATA, temp & 0xFF);
}

fn vga_clear() void {
    var blank: u16 = ' ' | vga_attribute << 8;
    wmemset(vga_text, blank, VGA_W * VGA_H);

    vga_cursor_x = 0;
    vga_cursor_y = 0;
    _vga_move_cursor();
}

fn vga_putc(c: u8) void {
    if (c == 0x08) {
        // backspace
        if (vga_cursor_x != 0) {
            vga_cursor_x -= 1;
        }
    } else if (c == '\t') {
        vga_cursor_x = (vga_cursor_x + 8) & ~(8 - 1);
    } else if (c == '\r') {
        vga_cursor_x = 0;
    } else if (c == '\n') {
        vga_cursor_x = 0;
        vga_cursor_y += 1;
    } else if (c >= ' ') {
        vga_text[vga_cursor_y * VGA_W + vga_cursor_x] = c | vga_attribute << 8;
        vga_cursor_x += 1;
    }

    if (vga_cursor_x >= 80) {
        vga_cursor_x = 0;
        vga_cursor_y += 1;
    }

    _vga_scroll();
    _vga_move_cursor();
}


fn vga_setcolor(fg: u16, bg: u16) void {
    vga_attribute = (bg << 4) | (fg & 0x0F);
}

fn vga_init() void {
    vga_text = as([]u16, 0xB8000);

    // enable cursor
    outb(CRTC_ADDR, 0x0A);
    var start: u8 = inb(CRTC_DATA) & 0xC0;
    outb(CRTC_DATA, start | 0);

    outb(CRTC_ADDR, 0x0B);
    var end: u8 = inb(CRTC_DATA) & 0xC0;
    outb(CRTC_DATA, start | 15);

    vga_clear();
}

#endif
