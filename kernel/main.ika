#include "boot_info.ika"

// arch
#include "gdt.ika"
#include "idt.ika"
#include "isr.ika"
#include "irq.ika"
#include "interrupt.ika"
#include "pmm.ika"
#include "vmm.ika"

// drivers
#include "console.ika"
#include "timer.ika"
#include "kbd.ika"

// lib
#include "print.ika"
#include "getc.ika"
#include "time.ika"

pub fn color_test() void {
    "Color test:\n";
    "Standard: ";
    "\x1b[97;40m   0 \x1b[0m";
    "\x1b[97;41m   1 \x1b[0m";
    "\x1b[97;42m   2 \x1b[0m";
    "\x1b[97;43m   3 \x1b[0m";
    "\x1b[97;44m   4 \x1b[0m";
    "\x1b[97;45m   5 \x1b[0m";
    "\x1b[97;46m   6 \x1b[0m";
    "\x1b[97;47m   7 \x1b[0m";

    "\nIntense:  ";
    "\x1b[30;100m   8 \x1b[0m";
    "\x1b[30;101m   9 \x1b[0m";
    "\x1b[30;102m  10 \x1b[0m";
    "\x1b[30;103m  11 \x1b[0m";
    "\x1b[30;104m  12 \x1b[0m";
    "\x1b[30;105m  13 \x1b[0m";
    "\x1b[30;106m  14 \x1b[0m";
    "\x1b[30;107m  15 \x1b[0m";
    "\x1b[0m\n";
}

pub fn print_memory_map(info: *BootInfo) void {
    "Kernel end: 0x%x\n", info.kernel_end;
    "Memory map:\n";
    var i: u32 = 0;
    while (i < info.mmap_count) : (i += 1) {
        if (info.mmap[i].base.high == 0 && info.mmap[i].length.high == 0) {
            "mmap[%d]:\n", i;
            "    addr: 0x%x\n", info.mmap[i].base.low;
            "    length: %u\n", info.mmap[i].length.low;
        }
    }
}

pub fn kmain(info: *BootInfo) void {
    // boot stage 1
    gdt_init();
    idt_init();
    isr_init();
    irq_init();

    console_init();
    pmm_init(info);
    vmm_init(info);

    // boot stage 2
    timer_init(100);
    kbd_init();

    interrupt_enable();
    "takos is running! %s\n", "WAH!";

    print_memory_map(info);
    color_test();

    "Free pages: %d\n", pmm_free_pages();

    var p: []u32 = as([]u32, 0x40000000);
    vmm_alloc_and_map(p, PG_RW);
    memset(p, 0xFF, PAGE_SIZE);
    *p = 0xDEADBEEF;
    if (*p == 0xDEADBEEF) {
        "Paging is working!\n";
    }

    "Keyboard test: ";
    while (true) {
        var c: i32 = getchar();
        putchar(c);
        if (c == '\n') {
            break;
        }
    }

    "Timer test:\n";
    var i: u32 = 0;
    while (i < 5) {
        i += 1;
        sleep(1000);
        if (i == 1) {
            "%d second has passed\n", i;
        } else {
            "%d seconds have passed\n", i;
        }
    }

    "Interrupt test:\n";
    breakpoint();
}
