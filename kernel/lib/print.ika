#if !PRINT
#define PRINT

#include "console.ika"

#include "string.ika"
#include "va_arg.ika"
#include "ctype.ika"
#include "spinlock.ika"

var print_lock: spinlock_t;

fn putchar(c: u8) i32 {
    console_putc(c);
    return c;
}

fn puts(s: []u8) i32 {
    if (s == null) {
        return 0;
    }

    var len: u32 = strlen(s);

    spin_lock(&print_lock);
    console_write(s, len);
    spin_unlock(&print_lock);

    return len;
}

fn vprintf(fmt: []u8, ap: va_list) i32 {
    var count: i32 = 0;

    spin_lock(&print_lock);

    while (*fmt != 0) : (fmt += 1) {
        if (*fmt != '%') {
            putchar(*fmt);
            count += 1;
            continue;
        }

        fmt += 1;

        if (*fmt == 'c') {
            putchar(*as(*u8, va_arg(&ap, sizeof(u8))));
        } else if (*fmt == 's') {
            var s: []u8 = *as(*[]u8, va_arg(&ap, sizeof([]u8)));
            if (s == null) {
                s = "(null)";
            }

            var len: u32 = strlen(s);
            console_write(s, len);
            count += len;
        } else if (*fmt == '%') {
            putchar('%');
            count += 1;
        } else if (*fmt == 'd') {
            var n: i32 = *as(*i32, va_arg(&ap, sizeof(i32)));
            var buf: [16]u8;

            var s: []u8 = itoa(n, &buf, 10);
            var len: u32 = strlen(s);
            console_write(s, len);
            count += len;
        } else if (*fmt == 'u') {
            var n: u32 = *as(*u32, va_arg(&ap, sizeof(u32)));
            var buf: [16]u8;

            var s: []u8 = itoa(n, &buf, 10);
            var len: u32 = strlen(s);
            console_write(s, len);
            count += len;
        } else if (*fmt == 'p' || *fmt == 'x' || *fmt == 'X') {
            if (*fmt == 'p') {
                putchar('0');
                putchar('x');
                count += 2;
            }
            var n: u32 = *as(*u32, va_arg(&ap, sizeof(u32)));
            var buf: [16]u8;

            var s: []u8 = utoa(n, &buf, 16);
            var i: u32 = 0;
            while (s[i] != 0) : (i += 1) {
                s[i] = toupper(s[i]);
            }

            var len: u32 = strlen(s);
            console_write(s, len);
            count += len;
        } else {
            putchar('%');
            putchar(*fmt);
            count += 2;
        }
    }

    spin_unlock(&print_lock);

    return count;
}

fn printf(fmt: []u8, ...) i32 {
    var ap: va_list;
    va_start(&ap, &fmt, sizeof([]u8));
    var count: i32 = vprintf(fmt, ap);
    va_end(&ap);

    return count;
}

#endif
