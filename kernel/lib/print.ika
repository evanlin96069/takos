#if !PRINT
#define PRINT

#include "console.ika"

#include "string.ika"
#include "va_arg.ika"
#include "ctype.ika"

const PRINT_BUF_SIZE = 512;
var _out_buf: [PRINT_BUF_SIZE]u8;
var _out_len: u32 = 0;

fn flush() void {
    if (_out_len != 0) {
        console_write(&_out_buf, _out_len);
        _out_len = 0;
    }
}

fn putchar(c: u8) i32 {
    _out_buf[_out_len] = c;
    _out_len += 1;
    if (_out_len == PRINT_BUF_SIZE || c == '\n') {
        flush();
    }

    return c;
}

fn puts(s: []u8) i32 {
    if (s == null) {
        return 0;
    }

    var len: i32 = 0;
    while (*s != 0) : (s += 1) {
        putchar(*s);
        len += 1;
    }

    return len;
}

fn vprintf(fmt: []u8, ap: va_list) i32 {
    var count: i32 = 0;

    while (*fmt != 0) : (fmt += 1) {
        if (*fmt != '%') {
            putchar(*fmt);
            count += 1;
            continue;
        }

        fmt += 1;

        if (*fmt == 'c') {
            putchar(*as(*u8, va_arg(&ap, sizeof(u8))));
        } else if (*fmt == 's') {
            var s: []u8 = *as(*[]u8, va_arg(&ap, sizeof([]u8)));
            if (s == null) {
                s = "(null)";
            }
            count += puts(s);
        } else if (*fmt == '%') {
            putchar('%');
            count += 1;
        } else if (*fmt == 'd') {
            var n: i32 = *as(*i32, va_arg(&ap, sizeof(i32)));
            var buf: [16]u8;
            count += puts(itoa(n, &buf, 10));
        } else if (*fmt == 'u') {
            var n: u32 = *as(*u32, va_arg(&ap, sizeof(u32)));
            var buf: [16]u8;
            count += puts(utoa(n, &buf, 10));
        } else if (*fmt == 'p' || *fmt == 'x' || *fmt == 'X') {
            if (*fmt == 'p') {
                count += puts("0x");
            }
            var n: u32 = *as(*u32, va_arg(&ap, sizeof(u32)));
            var buf: [16]u8;

            var s: []u8 = utoa(n, &buf, 16);
            var i: u32 = 0;
            while (s[i] != 0) : (i += 1) {
                s[i] = toupper(s[i]);
            }
            count += puts(s);
        } else {
            putchar('%');
            putchar(*fmt);
            count += 2;
        }
    }

    flush();
    return count;
}

fn printf(fmt: []u8, ...) i32 {
    var ap: va_list;
    va_start(&ap, &fmt, sizeof([]u8));
    var count: i32 = vprintf(fmt, ap);
    va_end(&ap);

    return count;
}

#endif
