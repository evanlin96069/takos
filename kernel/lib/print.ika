#if !PRINT
#define PRINT

#include "console.ika"

#include "string.ika"
#include "va_arg.ika"
#include "ctype.ika"

fn putchar(c: u8) i32 {
    console_putc(c);
    return c;
}

fn puts(s: []u8) i32 {
    if (s == null) {
        return 0;
    }

    var len: u32 = strlen(s);
    console_write(s, len);

    return len;
}

fn itoa(value: i32, str: []u8, base: i32) []u8 {
    const digits = "0123456789abcdef";

    var i: u32 = 0;
    var negative: bool = false;

    if (value == 0) {
        str[0] = '0';
        str[1] = 0;
        return str;
    }

    if (value < 0 && base == 10) {
        negative = true;
        value = -value;
    }

    while (value != 0) : (value /= base) {
        var rem: u32 = value % base;
        str[i] = digits[rem];
        i += 1;
    }

    if (negative) {
        str[i] = '-';
        i += 1;
    }

    str[i] = 0;

    // reverse string
    var start: u32 = 0;
    var end: u32 = i - 1;
    while (start < end) {
        var temp: u8 = str[start];
        str[start] = str[end];
        str[end] = temp;
        end -= 1;
        start += 1;
    }
    return str;
}

fn printf(fmt: []u8, ...) i32 {
    var ap: va_list;
    va_start(&ap, &fmt, sizeof([]u8));

    var count: i32 = 0;

    while (*fmt != 0) : (fmt += 1) {
        if (*fmt != '%') {
            putchar(*fmt);
            count += 1;
            continue;
        }

        fmt += 1;

        if (*fmt == 'c') {
            putchar(*as(*u8, va_arg(&ap, sizeof(u8))));
        } else if (*fmt == 's') {
            var s: []u8 = *as(*[]u8, va_arg(&ap, sizeof([]u8)));
            if (s == null) {
                s = "(null)";
            }
            count += puts(s);
        } else if (*fmt == '%') {
            putchar('%');
            count += 1;
        } else if (*fmt == 'd') {
            var n: i32 = *as(*i32, va_arg(&ap, sizeof(i32)));
            var buf: [16]u8;
            count += puts(itoa(n, &buf, 10));
        } else if (*fmt == 'p' || *fmt == 'x' || *fmt == 'X') {
            if (*fmt == 'p') {
                count += puts("0x");
            }
            var n: u32 = *as(*u32, va_arg(&ap, sizeof(u32)));
            var buf: [16]u8;

            var s: []u8 = itoa(n, &buf, 16);
            var i: u32 = 0;
            while (s[i] != 0) : (i += 1) {
                s[i] = toupper(s[i]);
            }
            count += puts(s);
        } else {
            putchar('%');
            putchar(*fmt);
            count += 2;
        }
    }

    va_end(&ap);
    return count;
}

#endif
