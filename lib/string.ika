#if !STRING
#define STRING

fn memcpy(dest: *void, src: *void, n: u32) *void {
    var _dest: []u8 = dest;
    var _src: []u8 = src;

    var i: u32 = 0;
    while (i < n) : (i += 1) {
        _dest[i] = _src[i];
    }

    return dest;
}

fn memset(dest: *void, c: i32, n: u32) *void {
    var _dest: []u8 = dest;
    var i: u32 = 0;
    while (i < n) : (i += 1) {
        _dest[i] = c;
    }
}

fn wmemset(dest: []u16, c: u16, n: u32) *void {
    var i: u32 = 0;
    while (i < n) : (i += 1) {
        dest[i] = c;
    }
}

fn strlen(s: []u8) u32 {
    var i: u32 = 0;
    while (s[i] != 0) {
        i += 1;
    }
    return i;
}

fn strcmp(s1: []u8, s2: []u8) i32 {
    while ((*s1 != 0) && (*s1 == *s2)) {
        s1 += 1;
        s2 += 1;
    }
    return *s1 - *s2;
}

fn strncmp(s1: []u8, s2: []u8, n: u32) i32 {
    while (n > 0) {
        if (*s1 != *s2) {
            return *s1 - *s2;
        }

        if (*s1 == 0) {
            return 0;
        }

        s1 += 1;
        s2 += 1;
        n -= 1;
    }

    return 0;
}

fn utoa(value: u32, str: []u8, base: i32) []u8 {
    const digits = "0123456789abcdef";
    if (value == 0) {
        str[0] = '0';
        str[1] = 0;
        return str;
    }

    var i: u32 = 0;
    while (value != 0) : (value /= base) {
        var rem: u32 = value % base;
        str[i] = digits[rem];
        i += 1;
    }

    str[i] = 0;

    // reverse string
    var start: u32 = 0;
    var end: u32 = i - 1;
    while (start < end) {
        var temp: u8 = str[start];
        str[start] = str[end];
        str[end] = temp;
        end -= 1;
        start += 1;
    }
    return str;
}

fn itoa(value: i32, str: []u8, base: i32) []u8 {
    var negative: u32 = 0;
    if (value < 0) {
        negative = 1;
        str[0] = '-';
        value = -value;
    }

    utoa(value, str + negative, base);
    return str;
}

#endif
